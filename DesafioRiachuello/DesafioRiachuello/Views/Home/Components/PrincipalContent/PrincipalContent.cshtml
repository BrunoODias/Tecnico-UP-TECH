@model List<ModelsServicesInterfaces.ListBook>
<style>
    #PrincipalContent {
        position: absolute;
        top: 3.4rem;
        max-width: 40rem;
        height: calc(100% - 10rem);
        width: 100%;
    }

    #TabContent {
        height: calc(100vh - 6.5rem) !important;
    }

    .tab-pane {
        flex-wrap: wrap;
    }
    #TabContentSelector {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
    }
    ::-webkit-scrollbar {
        width: 10px;
    }

    .pagination {
        justify-content: center;
    }
    
    .pagination > div {
        width: fit-content;
    }
</style>
<div id="PrincipalContent">
    @if (Model != null && Model.Count > 0)
    {
        <ul class="nav nav-tabs" id="TabContentSelector" role="tablist">
            @{
                bool first = true;
            }
            @foreach (var currentTab in Model)
            {
                @if (string.IsNullOrWhiteSpace(currentTab.Gender) == false && currentTab.Books != null && currentTab.Books.Count > 0)
                {
                    <li class="nav-item">
                        <a class="nav-link clickable @(first ? " active " : "")" id="@currentTab.GenderType-tab-selector" data-toggle="tab" role="tab" aria-controls="@currentTab.GenderType-tab" aria-selected="@(first ? "true" : "false")">@currentTab.Gender</a>
                    </li>
                    first = false;
                }
            }
        </ul>
        <div class="tab-content w-100" id="TabContent">
            @{
                first = true;
            }
            @foreach (var currentTab in Model)
            {
                @if (string.IsNullOrWhiteSpace(currentTab.Gender) == false && currentTab.Books != null && currentTab.Books.Count > 0)
                {
                    <div class="tab-pane w-100 h-100 scrollable p-3 @(first? " show active d-flex " : "")" id="@currentTab.GenderType-tab" role="tabpanel" aria-labelledby="@currentTab.GenderType-tab">
                        @foreach (var currentBook in currentTab.Books)
                        {
                            @if (string.IsNullOrWhiteSpace(currentBook.Code) == false)
                            {
                                @await Component.InvokeAsync("GenerateDisplayBook", currentBook)
                            }
                        }
                    </div>
                    first = false;
                }
            }
        </div>
    }
    @if (ViewData["CurrentPage"] != null && ViewData["TotalPages"] != null) { 
        <div class="row pagination">
            <div class="btn btn-primary mx-2" id="btnBackList">Voltar 5</div>
            <div class="btn btn-primary " id="btnPreviousPage">Anterior</div>
            <div class="btn btn-primary mx-2 disabled">Página @ViewData["CurrentPage"] de @ViewData["TotalPages"]</div>
            <div class="btn btn-primary " id="btnNextPage">Próxima</div>
            <div class="btn btn-primary mx-2" id="btnMoveList">Adiantar 5</div>
        </div>
        <script>
            (function () {
                function MovePag(range) {
                    var segments = location.pathname?.split('/');
                    var last = Number(segments[segments.length - 1]);
                    if (isNaN(last)) {
                        if (range < 1) {
                            return;
                        }
                        else if (range > @ViewData["TotalPages"]) {
                            return;
                        }
                    }
                    else if ((last + range < 0) || ((last + range) > @ViewData["TotalPages"])) {
                        return;
                    }

                    if(isNaN(last)){
                        segments.push(range);
                    }
                    else{
                        last += range;
                        segments[segments.length - 1] = last;
                    }
                    location.href = location.origin + segments.join('/');
                };
                document.getElementById('btnBackList').addEventListener('click', function (e) {
                    MovePag(-5);
                });
                document.getElementById('btnPreviousPage').addEventListener('click', function (e) {
                    MovePag(-1);
                });
                document.getElementById('btnNextPage').addEventListener('click', function (e) {
                    MovePag(1);
                });
                document.getElementById('btnMoveList').addEventListener('click', function (e) {
                    MovePag(5);
                });
            })();
        </script>
    }
</div>